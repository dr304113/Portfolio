package com.sg.guessthenumber.dao;

import com.sg.guessthenumber.dto.Game;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author dr304
 */
@Repository
@Profile("database")
public class GameDatabaseDao implements GameDao {

    //DB connectivity Template for reusability
    private final JdbcTemplate jdbcTemplate;

    public GameDatabaseDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Game addGame(Game game) {
        //"gameId" auto generated by DB & "finished" is boolean w/ default = false;
        final String sql = "INSERT INTO game(answer) VALUES(?);";

        //grabbing keys generated by DB
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();

        //Connection to DB(conn)
        jdbcTemplate.update((Connection conn) -> {
            //Using statement to execute paramerized query
            PreparedStatement statement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, game.getAnswer());
            return statement;
        }, keyHolder);

        game.setGameId(keyHolder.getKey().intValue());

        return game;
    }

    @Override
    public List<Game> getAllGames() {
        final String sql = "SELECT gameId, answer, finished FROM game;";
        List<Game> allGames = jdbcTemplate.query(sql, new GameMapper());
        return allGames;
    }

    @Override
    public Game getGameById(int gameId) {
        try {
            final String sql = "SELECT gameId, answer, finished FROM game WHERE gameId = ?;";
            return jdbcTemplate.queryForObject(sql, new GameMapper(), gameId);
        } catch (DataAccessException ex) {
            return null;
        }
    }

    @Override
    public boolean updateGame(Game game) {
        final String sql = "UPDATE game SET answer = ?, finished = ? WHERE gameId = ?;";
        return jdbcTemplate.update(sql, game.getAnswer(), game.isFinished(), game.getGameId()) > 0;
    }

    @Override
    @Transactional
    public boolean deleteGameById(int gameId) {
        final String DELETE_ROUND = "DELETE FROM round WHERE gameId = ?";
        jdbcTemplate.update(DELETE_ROUND, gameId);

        final String sql = "DELETE FROM game WHERE gameId = ?;";
        return jdbcTemplate.update(sql, gameId) > 0;
    }

    //Reusable RowMapper
    //Implements RowMapper with object to be returned in overridden method
    private final class GameMapper implements RowMapper<Game> {

        @Override
        public Game mapRow(ResultSet rs, int index) throws SQLException {
            Game game = new Game();
            game.setGameId(rs.getInt("gameId"));
            game.setAnswer(rs.getString("answer"));
            game.setFinished(rs.getBoolean("finished"));
            return game;
        }
    }

}
