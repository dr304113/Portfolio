package com.sg.guessthenumber.dao;

import com.sg.guessthenumber.dto.Round;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

/**
 *
 * @author dr304
 */
@Repository
@Profile("database")
public class RoundDatabaseDao implements RoundDao {

    //DB connectivity Template for reusability
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public RoundDatabaseDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Round addRound(Round round) {
        //"roundId" auto generated by DB
        final String sql = "INSERT INTO round(guess, guessTime, exactMatches, partialMatches, gameId) VALUES(?,?,?,?,?);";

        //grabbing keys generated by DB
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();

        //Connection to DB(conn)
        jdbcTemplate.update((Connection conn) -> {
            PreparedStatement statement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, round.getGuess());
            statement.setTimestamp(2, Timestamp.valueOf(round.getGuessTime()));
            statement.setInt(3, round.getExactMatches());
            statement.setInt(4, round.getPartialMatches());
            statement.setInt(5, round.getGameId());
            return statement;
        }, keyHolder);
        round.setRoundId(keyHolder.getKey().intValue());
        return round;
    }

    @Override
    public List<Round> getAllRounds() {
        final String sql = "SELECT roundId, guess, guessTime, exactMatches, partialMatches, gameId FROM round ORDER BY guessTime;";
        return jdbcTemplate.query(sql, new RoundMapper());
    }

    @Override
    public Round getRoundById(int roundId) {
        try {
            final String SELECT_ROUND_BY_ID = "SELECT roundId, guess, guessTime, exactMatches, partialMatches, gameId FROM round WHERE roundId = ?";
            return jdbcTemplate.queryForObject(SELECT_ROUND_BY_ID, new RoundMapper(), roundId);
        } catch (DataAccessException ex) {
            return null;
        }
    }

    @Override
    public boolean updateRound(Round round) {
        final String sql = "UPDATE round "
                + "SET guess = ?, "
                + "guessTime = ?, "
                + "exactMatches = ?, "
                + "partialMatches = ?, "
                + "gameId = ? "
                + "WHERE roundId = ?;";

        return jdbcTemplate.update(sql,
                round.getGuess(),
                round.getGuessTime(),
                round.getExactMatches(),
                round.getPartialMatches(),
                round.getGameId(),
                round.getRoundId()) > 0;
    }

    @Override
    public boolean deleteRoundById(int id) {
        final String sql = "DELETE FROM round WHERE roundId = ?;";
        return jdbcTemplate.update(sql, id) > 0;
    }
    //Reusable RowMapper
    //Implements RowMapper with object to be returned in overridden method

    private final class RoundMapper implements RowMapper<Round> {

        @Override
        public Round mapRow(ResultSet rs, int index) throws SQLException {
            Round round = new Round();
            round.setRoundId(rs.getInt("roundId"));
            round.setGuess(rs.getString("guess"));
            round.setGuessTime(rs.getTimestamp("guessTime").toLocalDateTime());
            round.setExactMatches(rs.getInt("exactMatches"));
            round.setPartialMatches(rs.getInt("partialMatches"));
            round.setGameId(rs.getInt("gameId"));
            return round;
        }
    }

}
